# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml

    # ssh-keygen -m PEM -t rsa -b 4096
    # cat id_rsa.pub >> authorized_keys
    - name: Push Folder to Server
      uses: easingthemes/ssh-deploy@main
      env:
        # 本地.ssh文件下的私钥id_rsa，存在secrets的PRIVATE_KEY中
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        # 复制操作的参数。"-avzr --delete"意味部署时清空服务器目标目录下的文件
        ARGS: "-avz --delete"
        # 你想要上传的文件夹路径
        SOURCE: "xxl-job/"  
        # 服务器域名/IP
        REMOTE_HOST: "1.13.245.30"
        # 服务器默认用户名为root
        REMOTE_USER: "root"
        # 通常是22
        REMOTE_PORT: 22
        # 远程服务器上的目标路径       
        TARGET: "/opt/lilishop/xxl-job"
        EXCLUDE: "/dist/, /node_modules/"
        SCRIPT_BEFORE: |
          whoami
          ls -al
        SCRIPT_AFTER: |
          whoami
          ls -al
          cd /opt/lilishop/
          # docker build --rm -f ./Dockerfile -t douyin:latest .
          # docker-compose -f docker-compose.yml restart
          # 检查容器是否存在
          # if docker container ls -a | grep -q "my-zhontai-apihost"; then
          #      echo "容器已存在"
          #      # 停止并移除容器
          #      docker stop my-zhontai-apihost
          #      docker rm my-zhontai-apihost
          # fi
          # # 容器挂载的路径
          # mkdir /root/zhontai/volumns/upload -p
          # docker run --name my-zhontai-apihost -d -p 9902:8000  -e ASPNETCORE_ENVIRONMENT=Testing  -v /root/zhontai/volumns/admindb.db:/app/admindb.db -v /root/zhontai/volumns/upload:/app/wwwroot/upload zhontai/apihost:latest
